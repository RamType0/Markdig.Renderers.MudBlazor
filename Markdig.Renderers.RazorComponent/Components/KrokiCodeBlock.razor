@using Markdig.Syntax
@using global::Kroki
@using System.IO.Compression
@inject KrokiHttpRequestFactory KrokiHttpRequestFactory

<div alt="@diagramSource" @attributes="@Attributes">
@if (overrideContent is not null)
{
    @overrideContent(CodeBlock)
}
else
{
    <img src="@imageSrc" />
}

</div>
@code {

    [CascadingParameter]
    CascadingCodeBlockOptions? CodeBlockOptions { get; set; }

    [Parameter, EditorRequired]
    public required CodeBlock CodeBlock { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object?> Attributes { get; set; } = [];

    string diagramSource = "";

    string imageSrc = "";
    RenderFragment<CodeBlock>? overrideContent;

    protected override void OnParametersSet()
    {
        diagramSource = RazorComponentRenderer.GetLeafRawLines(CodeBlock);

        if (CodeBlock.IsOpen && CodeBlockOptions?.OpenCodeBlockContent is { } openCodeBlockContent)
        {
            overrideContent = openCodeBlockContent;
            return;
        }
        else
        {
            overrideContent = null;

            
            imageSrc = KrokiHttpRequestFactory.CreateGetRequestUri(new()
                {
                    DiagramType = (CodeBlock as FencedCodeBlock)?.Info ?? throw new ArgumentException(),
                    OutputFormat = FileFormat.Svg,
                    DiagramSource = diagramSource
                }, CompressionLevel.Optimal).AbsoluteUri;
        }
        
    }
}
